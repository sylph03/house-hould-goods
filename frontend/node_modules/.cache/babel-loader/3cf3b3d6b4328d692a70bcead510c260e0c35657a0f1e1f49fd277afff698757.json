{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dat\\\\Desktop\\\\house-hold-goods\\\\frontend\\\\src\\\\components\\\\contexts\\\\FavoriteContext.js\",\n  _s = $RefreshSig$();\n// FavoriteContext.js\nimport axios from 'axios';\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { AuthContext } from \"./AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const FavoriteContext = /*#__PURE__*/createContext();\nexport const FavoriteProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [favorites, setFavorites] = useState([]);\n\n  // Hàm để lấy danh sách yêu thích\n  const getFavorites = async () => {\n    if (user) {\n      try {\n        const favoritesProduct = await axios.get(`http://localhost:3000/favorites/${user.user_id}`);\n        setFavorites(favoritesProduct.data);\n      } catch (error) {\n        console.error(\"Error get favorites from API:\", error);\n      }\n    } else {\n      const savedFavorites = JSON.parse(localStorage.getItem('favorites')) || [];\n      setFavorites(savedFavorites);\n    }\n  };\n\n  // Đồng bộ sản phẩm yêu thích từ localStorage lên server khi người dùng đăng nhập\n  const syncFavoritesWithServer = async () => {\n    const savedFavorites = JSON.parse(localStorage.getItem('favorites')) || [];\n    if (savedFavorites.length > 0 && user) {\n      try {\n        // Duyệt qua tất cả sản phẩm yêu thích từ localStorage\n        for (const item of savedFavorites) {\n          // Kiểm tra xem sản phẩm yêu thích đã tồn tại trong cơ sở dữ liệu chưa\n          const productExists = await checkIfFavoriteExists(item.product_id);\n          if (!productExists) {\n            // Nếu sản phẩm chưa có trong cơ sở dữ liệu, thực hiện thêm vào yêu thích\n            await axios.post('http://localhost:3000/favorites', {\n              user_id: user.user_id,\n              product_id: item.product_id\n            });\n          }\n        }\n\n        // Sau khi đồng bộ với server, cập nhật lại danh sách yêu thích từ server\n        getFavorites();\n\n        // Xóa dữ liệu trong localStorage sau khi đồng bộ lên server thành công\n        localStorage.removeItem('favorites');\n      } catch (error) {\n        console.error('Error syncing favorites with server:', error);\n      }\n    }\n  };\n\n  // Hàm kiểm tra sản phẩm yêu thích đã tồn tại trong cơ sở dữ liệu hay chưa\n  const checkIfFavoriteExists = async product_id => {\n    try {\n      // Gửi yêu cầu đến server để kiểm tra xem sản phẩm đã có trong danh sách yêu thích chưa\n      const response = await axios.get(`http://localhost:3000/favorites/${user.user_id}/${product_id}`);\n\n      // Nếu có phản hồi, nghĩa là sản phẩm đã có trong cơ sở dữ liệu\n      return response.status === 200;\n    } catch (error) {\n      // Nếu có lỗi (ví dụ: 404), nghĩa là sản phẩm chưa có trong danh sách yêu thích\n      return false;\n    }\n  };\n\n  // Tải dữ liệu yêu thích khi component mount hoặc khi `user` thay đổi\n  useEffect(() => {\n    if (user) {\n      // Khi người dùng đăng nhập, đồng bộ dữ liệu yêu thích từ localStorage lên server\n      syncFavoritesWithServer();\n    } else {\n      // Khi người dùng chưa đăng nhập, lấy dữ liệu từ localStorage\n      getFavorites();\n    }\n  }, [user]);\n\n  // Thêm sản phẩm vào danh sách yêu thích\n  const addToFavorites = async product_id => {\n    if (user) {\n      try {\n        await axios.post('http://localhost:3000/favorites', {\n          user_id: user.user_id,\n          product_id\n        });\n        getFavorites();\n      } catch (error) {\n        console.error(error.response ? error.response.data.message : error.message);\n      }\n    } else {\n      if (!favorites.some(item => item.product_id === product_id)) {\n        const newFavorites = [...favorites, {\n          product_id\n        }];\n        setFavorites(newFavorites);\n        localStorage.setItem('favorites', JSON.stringify(newFavorites));\n      }\n    }\n  };\n\n  // Xóa sản phẩm khỏi danh sách yêu thích\n  const removeFavorites = async product_id => {\n    if (user) {\n      try {\n        await axios.delete(`http://localhost:3000/favorites/${user.user_id}/${product_id}`);\n        getFavorites();\n      } catch (error) {\n        console.error(error.response ? error.response.data.message : error.message);\n      }\n    } else {\n      const newFavorites = favorites.filter(item => item.product_id !== product_id);\n      setFavorites(newFavorites);\n      localStorage.setItem('favorites', JSON.stringify(newFavorites));\n      console.log(localStorage.getItem('favorites'));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(FavoriteContext.Provider, {\n    value: {\n      favorites,\n      addToFavorites,\n      removeFavorites\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this);\n};\n_s(FavoriteProvider, \"xk7RD7/NtBLCvf9l7x+5Liyi9HE=\");\n_c = FavoriteProvider;\nvar _c;\n$RefreshReg$(_c, \"FavoriteProvider\");","map":{"version":3,"names":["axios","React","createContext","useState","useEffect","useContext","AuthContext","jsxDEV","_jsxDEV","FavoriteContext","FavoriteProvider","children","_s","user","favorites","setFavorites","getFavorites","favoritesProduct","get","user_id","data","error","console","savedFavorites","JSON","parse","localStorage","getItem","syncFavoritesWithServer","length","item","productExists","checkIfFavoriteExists","product_id","post","removeItem","response","status","addToFavorites","message","some","newFavorites","setItem","stringify","removeFavorites","delete","filter","log","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Dat/Desktop/house-hold-goods/frontend/src/components/contexts/FavoriteContext.js"],"sourcesContent":["// FavoriteContext.js\r\nimport axios from 'axios';\r\nimport React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport { AuthContext } from \"./AuthContext\";\r\n\r\nexport const FavoriteContext = createContext();\r\n\r\nexport const FavoriteProvider = ({ children }) => {\r\n    \r\n    const { user } = useContext(AuthContext);\r\n    const [favorites, setFavorites] = useState([]);\r\n\r\n    // Hàm để lấy danh sách yêu thích\r\n    const getFavorites = async () => {\r\n        if (user) {\r\n            try {\r\n                const favoritesProduct = await axios.get(`http://localhost:3000/favorites/${user.user_id}`);\r\n                setFavorites(favoritesProduct.data);\r\n            } catch (error) {\r\n                console.error(\"Error get favorites from API:\", error);\r\n            }\r\n        } else {\r\n            const savedFavorites = JSON.parse(localStorage.getItem('favorites')) || [];\r\n            setFavorites(savedFavorites);\r\n        }\r\n    };\r\n\r\n    // Đồng bộ sản phẩm yêu thích từ localStorage lên server khi người dùng đăng nhập\r\n    const syncFavoritesWithServer = async () => {\r\n        const savedFavorites = JSON.parse(localStorage.getItem('favorites')) || [];\r\n        if (savedFavorites.length > 0 && user) {\r\n            try {\r\n                // Duyệt qua tất cả sản phẩm yêu thích từ localStorage\r\n                for (const item of savedFavorites) {\r\n                    // Kiểm tra xem sản phẩm yêu thích đã tồn tại trong cơ sở dữ liệu chưa\r\n                    const productExists = await checkIfFavoriteExists(item.product_id);\r\n                    \r\n                    if (!productExists) {\r\n                        // Nếu sản phẩm chưa có trong cơ sở dữ liệu, thực hiện thêm vào yêu thích\r\n                        await axios.post('http://localhost:3000/favorites', {\r\n                            user_id: user.user_id,\r\n                            product_id: item.product_id\r\n                        });\r\n                    }\r\n                }\r\n                \r\n                // Sau khi đồng bộ với server, cập nhật lại danh sách yêu thích từ server\r\n                getFavorites();\r\n    \r\n                // Xóa dữ liệu trong localStorage sau khi đồng bộ lên server thành công\r\n                localStorage.removeItem('favorites');\r\n            } catch (error) {\r\n                console.error('Error syncing favorites with server:', error);\r\n            }\r\n        }\r\n    };\r\n    \r\n    // Hàm kiểm tra sản phẩm yêu thích đã tồn tại trong cơ sở dữ liệu hay chưa\r\n    const checkIfFavoriteExists = async (product_id) => {\r\n        try {\r\n            // Gửi yêu cầu đến server để kiểm tra xem sản phẩm đã có trong danh sách yêu thích chưa\r\n            const response = await axios.get(`http://localhost:3000/favorites/${user.user_id}/${product_id}`);\r\n            \r\n            // Nếu có phản hồi, nghĩa là sản phẩm đã có trong cơ sở dữ liệu\r\n            return response.status === 200;\r\n        } catch (error) {\r\n            // Nếu có lỗi (ví dụ: 404), nghĩa là sản phẩm chưa có trong danh sách yêu thích\r\n            return false;\r\n        }\r\n    };\r\n    \r\n\r\n    // Tải dữ liệu yêu thích khi component mount hoặc khi `user` thay đổi\r\n    useEffect(() => {\r\n        if (user) {\r\n            // Khi người dùng đăng nhập, đồng bộ dữ liệu yêu thích từ localStorage lên server\r\n            syncFavoritesWithServer();\r\n        } else {\r\n            // Khi người dùng chưa đăng nhập, lấy dữ liệu từ localStorage\r\n            getFavorites();\r\n        }\r\n    }, [user]);\r\n\r\n    // Thêm sản phẩm vào danh sách yêu thích\r\n    const addToFavorites = async (product_id) => {\r\n        if (user) {\r\n            try {\r\n                await axios.post('http://localhost:3000/favorites', {user_id : user.user_id, product_id})\r\n                getFavorites();\r\n            } catch (error) {\r\n                console.error(error.response ? error.response.data.message : error.message);\r\n            }\r\n        } else {\r\n            if (!favorites.some(item => item.product_id === product_id)) {\r\n                const newFavorites = [...favorites, { product_id }];\r\n                setFavorites(newFavorites);\r\n                localStorage.setItem('favorites', JSON.stringify(newFavorites));\r\n            }\r\n        }\r\n    };\r\n\r\n    // Xóa sản phẩm khỏi danh sách yêu thích\r\n    const removeFavorites = async (product_id) => {\r\n        if (user) {\r\n            try {\r\n                await axios.delete(`http://localhost:3000/favorites/${user.user_id}/${product_id}`);\r\n                getFavorites();\r\n            } catch (error) {\r\n                console.error(error.response ? error.response.data.message : error.message);\r\n            }\r\n        } else {\r\n            const newFavorites = favorites.filter(item => item.product_id  !== product_id);\r\n            setFavorites(newFavorites);\r\n            localStorage.setItem('favorites', JSON.stringify(newFavorites));\r\n            console.log(localStorage.getItem('favorites'));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <FavoriteContext.Provider value={{ favorites, addToFavorites, removeFavorites }}>\r\n            {children}\r\n        </FavoriteContext.Provider>\r\n    );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}